/*
 * Copyright (C) 2019 Thinkenterprise
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * @author Michael Schaefer
 */

package com.thinkenterprise.domain.core;

import java.net.URI;
import java.util.Collections;
import java.util.Map;

import org.springframework.http.HttpStatus;

/**
 *  @see <a href="https://tools.ietf.org/html/rfc7807">RFC 7807: Problem Details for HTTP APIs</a>
 *  
 *  A Guide to the Problem Spring Web Library could be found here 
 *  
 *  https://www.baeldung.com/problem-spring-web
 *  https://github.com/zalando/problem-spring-web
 *  
 */

 
public class Problem {
	
		
	private URI type;
	private String title;
	private HttpStatus status;
	private String detail;
	
	
	public Problem() {
		super();
	}

	public Problem(URI type, String title, HttpStatus status, String detail) {
		super();
		this.type = type;
		this.title = title;
		this.status = status;
		this.detail = detail;
	}

	/**
     * An absolute URI that identifies the problem type. When dereferenced,
     * it SHOULD provide human-readable documentation for the problem type
     * (e.g., using HTML). When this member is not present, its value is
     * assumed to be "about:blank".
     *
     * @return an absolute URI that identifies this problem's type
     */
    public URI getType() {
        return this.type;
    }

    public void setType(URI type) {
		this.type = type;
	}

    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT
     * change from occurrence to occurrence of the problem, except for
     * purposes of localisation.
     *
     * @return a short, human-readable summary of this problem
     */
  
    public String getTitle() {
        return this.title;
    }

    public void setTitle(String title) {
		this.title = title;
	}
    
    /**
     * The HTTP status code generated by the origin server for this
     * occurrence of the problem.
     *
     * @return the HTTP status code
     */
   
    public HttpStatus getStatus() {
        return this.status;
    }
    

	public void setStatus(HttpStatus status) {
		this.status = status;
	}

    /**
     * A human readable explanation specific to this occurrence of the problem.
     *
     * @return A human readable explaination of this problem
     */
   
	public String getDetail() {
        return this.detail;
    }
	
	public void setDetail(String detail) {
		this.detail = detail;
	}


    /**
     * An absolute URI that identifies the specific occurrence of the problem.
     * It may or may not yield further information if dereferenced.
     *
     * @return an absolute URI that identifies this specific problem
     */
   
    

    
}
